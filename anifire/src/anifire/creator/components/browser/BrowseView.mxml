<s:Group
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:s="library://ns.adobe.com/flex/spark"
    xmlns:browser="anifire.creator.components.browser.*"
    implements="anifire.creator.interfaces.ICcBrowserContainer"
    width="100%"
    height="100%"
    clipAndEnableScrolling="true">

	<fx:Script>
		<![CDATA[
			private var charElements:Array;
			private var panelRows:Array = [1, 3];
			private var heightPerRow:Number = 138;
			private var selectedCharId:String = null;

			private function loadStockCharacters() : void
			{
				var studioThemeId:String = this._themeId;
				switch (this._themeId) {
					case "family":
						studioThemeId = "custom";
						break;
					case "cc2":
						studioThemeId = "action";
				}
				this._theme = new Theme();
				this._theme.addEventListener(Event.COMPLETE, this.onLoadThemeComplete);
				this._theme.initThemeByLoadThemeFile(studioThemeId);
			}

			private function onLoadThemeComplete(event:Event) : void
			{
				var theme:Theme = this._theme;
				var storedCharList:CharacterExplorerCollection = this._characterCollectionLookup[theme.id];
				// known chars of the current theme are not the previously displayed chars OR we haven't stored this theme's chars
				var storedCharsAndNotCurrent:Boolean = storedCharList != this._themeCharacterCollection || !storedCharList;
				this._themeCharacterCollection = storedCharList;
				// check if we have not stored this theme's char list
				if (!this._themeCharacterCollection)
				{
					// store the character list
					this._themeCharacterCollection = new CharacterExplorerCollection(theme);
					this._characterCollectionLookup[theme.id] = this._themeCharacterCollection;
					// add all the character thumbnails
					var totalChars:int = theme.charThumbs.length;
					var index:int = 0;
					while (index < totalChars)
					{
						var character:CharThumb = theme.charThumbs.getValueByIndex(index) as CharThumb;
						if (character.enable)
						{
							var thumbnail:ThumbModel = new ThumbModel(character, character.firstColorSetId);
							thumbnail.isStoreCharacter = true;
							this._themeCharacterCollection.addProduct(thumbnail);
						}
						index++;
					}
					this._themeCharacterCollection.sortByCategoryName();
					if (Boolean(theme.ccThemeId) && this._themeCharacterCollection.nextUserCharacterPage == 0)
					{
						this._themeCharacterCollection.addEventListener(ProductGroupCollectionEvent.THEME_CHAR_COMPLETE, this.onUserCCLoaded);
						this._themeCharacterCollection.loadNextPage();
						return;
					}
				}
				if (storedCharsAndNotCurrent)
				{
					this.customerCharaterExplorer.displayNaturally();
					this.stockCharaterExplorer.displayNaturally();
				}
			}

			public function init() : void
			{
				var currentTheme:Theme = ThemeManager.instance.currentTheme;
				for each (var char:CharThumb in currentTheme.charThumbs.getArray()) {
					var elem:CharThumbnail = new CharThumbnail();
					elem.addEventListener(MouseEvent.CLICK, this.charThumbnailClicked);
					elem.init(char);
					this.charElements.push(elem);
				}
				ui.ui_stockChars.charDataGroup.dataProvider = new ArrayCollection(this.charElements as Array);
				ui.ui_panelHeightDragger.addEventListener(MouseEvent.MOUSE_DOWN, this.panelDraggerClicked);
				this.setPanelHeights();
			}

			private function setPanelHeights() : void
			{
				ui.ui_stockChars.height = heightPerRow * panelRows[0];
				ui.ui_customChars.height = heightPerRow * panelRows[1];
				// hide panels with 0 height
				ui.ui_stockChars.visible = panelRows[0] == 0 ? false : true;
				ui.ui_customChars.visible = panelRows[1] == 0 ? false : true;
			}

			/**
			 * switch chars if it's a different id, hide if it's the same.
			 * also play the animation if the info column is hidden atm
			 * @param event CharThumbnail, we'll be getting the id from this
			 */		
			private function charThumbnailClicked(event:MouseEvent) : void
			{
				var thumb:CharThumbnail = event.target as CharThumbnail;
				var isClosed:Boolean = this.selectedCharId == null;
				if (this.selectedCharId == thumb.data.id) {
					ui.tr_infoBlockOut.play();
					this.selectedCharId = null;
					ui.ui_charInfoCol.clear();
				} else {
					this.selectedCharId = thumb.data.id;
					ui.ui_charInfoCol.init(thumb.data);
					if (isClosed) {
						ui.tr_infoBlockIn.play();
					}
				}	
			}

			private function panelDraggerClicked(event:MouseEvent) : void
			{
				var target:Button = event.target as Button;
				ui.addEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveWhileDraggerClicked);
				ui.addEventListener(MouseEvent.MOUSE_UP, this.panelDraggerUp);
			}

			private function mouseMoveWhileDraggerClicked(event:MouseEvent) : void
			{
				// see how much of the screen divided into 4 sections the mouse takes up
				var stockRows:Number = Math.round((event.stageY + 20) / this.heightPerRow);
				this.panelRows[0] = stockRows;
				this.panelRows[1] = 4 - stockRows;
				this.setPanelHeights();
			}

			private function panelDraggerUp(event:MouseEvent) : void
			{
				ui.removeEventListener(MouseEvent.MOUSE_MOVE, this.mouseMoveWhileDraggerClicked);
				ui.removeEventListener(MouseEvent.MOUSE_UP, this.panelDraggerUp);
			}
		]]>
	</fx:Script>

    <fx:Declarations>
		<s:Resize id="infoBlockIn" target="{infoBlock}" widthFrom="0" widthTo="300" duration="500"/>
		<s:Resize id="infoBlockOut" target="{infoBlock}" widthFrom="300" widthTo="0" duration="500"/>
	</fx:Declarations>

    <s:HGroup width="100%" height="100%"
		paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
		<s:HGroup id="infoBlock" width="0" clipAndEnableScrolling="true" height="100%">
			<browser:CharacterInfoColumn id="charInfoCol" height="100%"/>
			<s:Rect height="100%">
				<s:stroke>
					<s:SolidColorStroke color="#cccccc"/>
				</s:stroke>
			</s:Rect>
		</s:HGroup>
		<s:VGroup width="100%" height="100%" horizontalAlign="right">
			<browser:CharListPanel id="stockChars" title="Stock characters" width="100%"/>
			<s:Button id="panelHeightDragger" height="16" width="100%"
				skinClass="toonshop.creator.skins.browser.PanelHeightDraggerSkin"/>
			<browser:CharListPanel id="customChars" title="Custom characters" width="100%"/>
		</s:VGroup>
	</s:HGroup>
</s:Group>
