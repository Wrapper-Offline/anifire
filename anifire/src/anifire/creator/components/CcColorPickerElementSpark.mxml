<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:cComponents="anifire.creator.components.*"
	width="100%"
	height="30">

	<fx:Script>
		<![CDATA[
			import anifire.constant.CcLibConstant;
			import anifire.creator.events.CcColorPickerEvent;
			import anifire.creator.events.ColorPickerDropDownListEvent;
			import anifire.creator.models.CcCharacter;
			import anifire.creator.models.CcColor;
			import anifire.creator.models.CcColorThumb;
			import anifire.creator.models.CcComponent;
			import anifire.creator.models.CcComponentThumb;
			import anifire.creator.models.CcTheme;
			import anifire.util.ExtraDataTimer;
			import mx.containers.Canvas;

			private var component:CcComponent;
			private var colorThumb:CcColorThumb;
			private var char:CcCharacter;

			public function init(param1:CcComponent, param2:CcComponentThumb, param3:CcTheme, param4:CcCharacter) : void
			{
				var _loc6_:CcColorThumb = null;
				var _loc5_:int = 0;
				while(_loc5_ < param3.getColorThumbNum())
				{
					if((_loc6_ = param3.getColorThumbByIndex(_loc5_)).componentType == param2.type)
					{
						this.colorThumb = _loc6_;
					}
					_loc5_++;
				}
				this.initByColorThumb(param1,this.colorThumb,param3,param4);
			}
			
			public function initByColorThumb(param1:CcComponent, param2:CcColorThumb, param3:CcTheme, param4:CcCharacter) : void
			{
				this.component = param1;
				this.colorThumb = param2;
				this["sico" + this.colorThumb.colorReference].visible = true;
				this.char = param4;
				var _loc5_:Array = new Array();
				_loc5_ = this.colorThumb.colorChoices;
				this.destroy();
				var _loc6_:int = 0;
				while(_loc6_ < Math.min(_loc5_.length,5))
				{
					this.insertColor(_loc5_[_loc6_]);
					_loc6_++;
				}
			}
			
			private function insertColorTimer(param1:TimerEvent) : void
			{
				var _loc2_:ExtraDataTimer = param1.currentTarget as ExtraDataTimer;
				var _loc3_:Object = _loc2_.getData();
				var _loc4_:Array = _loc3_["colorThumbs"] as Array;
				this.insertColor(_loc4_[_loc2_.currentCount]);
			}
			
			private function onTimerDone(param1:TimerEvent) : void
			{
				var _loc2_:ExtraDataTimer = param1.currentTarget as ExtraDataTimer;
				_loc2_.stop();
				(param1.currentTarget as IEventDispatcher).removeEventListener(param1.type,this.onTimerDone);
			}
			
			private function colorPicker_colorChangeHandler(param1:ColorPickerDropDownListEvent) : void
			{
				this.tellEveryBodyColorChosen(param1.color,false);
			}
			
			private function colorPicker_colorCommitHandler(param1:ColorPickerDropDownListEvent) : void
			{
				this.tellEveryBodyColorChosen(param1.color);
			}
			
			private function onPickDefaultColor(param1:MouseEvent) : void
			{
				this.tellEveryBodyColorChosen(uint(Canvas(param1.currentTarget).data));
			}
			
			private function insertColor(param1:uint) : void
			{
				var _loc2_:Canvas = new Canvas();
				_loc2_.width = _loc2_.height = 25;
				_loc2_.data = param1;
				_loc2_.graphics.clear();
				_loc2_.graphics.lineStyle(2,16777215);
				_loc2_.graphics.beginFill(uint(_loc2_.data));
				_loc2_.graphics.drawCircle(_loc2_.width / 2,_loc2_.width / 2,_loc2_.width / 2);
				_loc2_.graphics.endFill();
				_loc2_.buttonMode = true;
				_loc2_.name = "button" + param1.toString();
				_loc2_.addEventListener(MouseEvent.MOUSE_OVER,this.doColorOver);
				_loc2_.addEventListener(MouseEvent.MOUSE_OUT,this.doColorOut);
				_loc2_.addEventListener(MouseEvent.CLICK,this.onPickDefaultColor);
				this.tileColor.addElement(_loc2_);
			}
			
			private function doColorOver(param1:Event) : void
			{
				var _loc2_:Canvas = param1.currentTarget as Canvas;
				_loc2_.graphics.clear();
				_loc2_.graphics.lineStyle(2,16488452);
				_loc2_.graphics.beginFill(uint(_loc2_.data));
				_loc2_.graphics.drawCircle(_loc2_.width / 2,_loc2_.width / 2,_loc2_.width / 2);
				_loc2_.graphics.endFill();
			}
			
			private function doColorOut(param1:Event) : void
			{
				var _loc2_:Canvas = param1.currentTarget as Canvas;
				_loc2_.graphics.clear();
				_loc2_.graphics.lineStyle(2,16777215);
				_loc2_.graphics.beginFill(uint(_loc2_.data));
				_loc2_.graphics.drawCircle(_loc2_.width / 2,_loc2_.width / 2,_loc2_.width / 2);
				_loc2_.graphics.endFill();
			}
			
			private function tellEveryBodyColorChosen(param1:uint, param2:Boolean = true) : void
			{
				var _loc3_:CcColor = new CcColor();
				_loc3_.ccColorThumb = this.colorThumb;
				if(CcLibConstant.ALL_MULTIPLE_COMPONENT_TYPES.indexOf(_loc3_.ccColorThumb.componentType) > -1)
				{
					_loc3_.ccComponent = this.component;
				}
				_loc3_.colorValue = param1;
				var _loc4_:CcColorPickerEvent;
				(_loc4_ = new CcColorPickerEvent(CcColorPickerEvent.COLOR_CHOSEN,this)).colorChosen = _loc3_;
				_loc4_.undoable = param2;
				this.dispatchEvent(_loc4_);
			}
			
			private function destroy() : void
			{
				var _loc1_:Number = NaN;
				var _loc2_:int = 0;
				if(this.tileColor.numElements > 1)
				{
					_loc1_ = this.tileColor.numElements - 1;
					_loc2_ = _loc1_;
					while(_loc2_ >= 1)
					{
						this.tileColor.removeElementAt(_loc2_);
						_loc2_--;
					}
				}
			}
			
			private function followColor(param1:Event) : void
			{
				var _loc2_:CcColor = null;
				if(this.colorThumb.parentComponentColorRef() != null)
				{
					_loc2_ = this.char.getUserChosenColorByColorReference(this.colorThumb.parentComponentColorRef());
					this.tellEveryBodyColorChosen(_loc2_.colorValue);
				}
			}
		]]>
	</fx:Script>

	<s:Group id="title" height="28" width="34" verticalCenter="0">
		<s:Group id="ico" width="34" height="28" verticalCenter="-3">
			<s:Image id="sicoccSkinColor" source="@Embed('../images/colorPicker/faceColorIcon.png')" visible="false"/>
			<s:Image id="sicoccFaceHairColor" source="@Embed('../images/colorPicker/beardColorIcon.png')" visible="false"/>
			<s:Image id="sicoccEyeLib" source="@Embed('../images/colorPicker/eyeEyelidColorIcon.png')" visible="false"/>
			<s:Image id="sicoccEyeIris" source="@Embed('../images/colorPicker/eyeIrisColorIcon.png')" visible="false"/>
			<s:Image id="sicoccGlassesFrame" source="@Embed('../images/colorPicker/glassesFrameColorIcon.png')" visible="false"/>
			<s:Image id="sicoccGlassesLens" source="@Embed('../images/colorPicker/glassesLensColorIcon.png')" visible="false"/>
			<s:Image id="sicoccMouthLip" source="@Embed('../images/colorPicker/mouthColorIcon.png')" visible="false"/>
			<s:Image id="sicoccMustache" source="@Embed('../images/colorPicker/mustacheColorIcon.png')" visible="false"/>
			<s:Image id="sicoccBeard" source="@Embed('../images/colorPicker/beardColorIcon.png')" visible="false"/>
			<s:Image id="sicoccEyebrow" source="@Embed('../images/colorPicker/eyebrowColorIcon.png')" visible="false"/>
			<s:Image id="sicoccHairMajor" source="@Embed('../images/colorPicker/hairMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccHairMinor" source="@Embed('../images/colorPicker/hairMinorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccUpperMain" source="@Embed('../images/colorPicker/upperMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccUpperMinor" source="@Embed('../images/colorPicker/upperMinorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccLowerMain" source="@Embed('../images/colorPicker/lowerMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccLowerMainA" source="@Embed('../images/colorPicker/lowerMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccLowerMinor" source="@Embed('../images/colorPicker/lowerMinorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccBackMajor" source="@Embed('../images/colorPicker/backMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccBackMinor" source="@Embed('../images/colorPicker/backMinorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccDecMajor" source="@Embed('../images/colorPicker/decMajorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccDecMinor" source="@Embed('../images/colorPicker/decMinorColorIcon.png')" visible="false"/>
			<s:Image id="sicoccFeetMain" source="@Embed('../images/colorPicker/feetColorIcon.png')" visible="false"/>
			<s:Image id="sicoccHandMain" source="@Embed('../images/colorPicker/handColorIcon.png')" visible="false"/>
		</s:Group>
	</s:Group>
	<s:HGroup id="tileColor" width="100%" height="70">
		<cComponents:ColorPickerDropDownList
			id="colorPicker"
			colorChange="colorPicker_colorChangeHandler(event)" 
			colorCommit="colorPicker_colorCommitHandler(event)"/>
	</s:HGroup>

</s:HGroup>
