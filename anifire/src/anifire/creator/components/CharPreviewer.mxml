<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="300"
	verticalScrollPolicy="off"
	clipContent="false"
	creationComplete="this.CharPreview()">

	<fx:Declarations>
		<mx:Blur id="fadeIn" blurXFrom="10" blurXTo="0" blurYFrom="10" blurYTo="0" duration="300" target="{this}"/>
	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import anifire.component.CustomCharacterMaker;
			import anifire.constant.AnimeConstants;
			import anifire.constant.CcLibConstant;
			import anifire.constant.ServerConstants;
			import anifire.constant.ThemeConstants;
			import anifire.creator.events.CcCharPreviewerEvent;
			import anifire.creator.events.CcComponentLoadEvent;
			import anifire.creator.models.CcAction;
			import anifire.creator.models.CcCharacter;
			import anifire.creator.models.CcColor;
			import anifire.creator.models.CcComponent;
			import anifire.creator.models.CcComponentThumb;
			import anifire.creator.models.CcFacial;
			import anifire.creator.models.CcLibrary;
			import anifire.creator.models.CcSelection;
			import anifire.creator.models.CcState;
			import anifire.event.LoadEmbedMovieEvent;
			import anifire.event.LoadMgrEvent;
			import anifire.managers.AppConfigManager;
			import anifire.managers.NativeCursorManager;
			import anifire.util.ExtraDataLoader;
			import anifire.util.UtilHashArray;
			import anifire.util.UtilLicense;
			import anifire.util.UtilLoadMgr;
			import anifire.util.UtilNetwork;
			import anifire.util.UtilPlain;
			import mx.core.UIComponent;
			import nochump.util.zip.ZipFile;
			import anifire.models.creator.CCBodyModel;
			import anifire.models.creator.CCBodyComponentModel;
			import anifire.models.creator.CCThemeModel;
			import anifire.models.creator.CCCharacterActionModel;

			private static var _configManager:AppConfigManager = AppConfigManager.instance;
			private static var _themeId:String;
			private var myUI:UIComponent;
			private const LOADER:String = "loader";
			private var _customColor:UtilHashArray;
			private var _orgX:Number;
			private var _tarX:Number;
			private var _orgY:Number;
			private var _tarY:Number;
			private var _orgRatio:Number = 1;
			private var _zoomRatio:Number = 2;
			private var _orgHeight:Number = 240;
			private const MC:String = "MC";
			private var _isBuilding:int = 0;
			private var _isRandom:Boolean = false;
			public var showFace:Boolean = false;
			private var _shouldPauseOnLoadByteComplete:Boolean = false;
			private var _charCanvasHeight:Number;

			private static function get themeId() : String
			{
				if(!_themeId)
				{
					_themeId = _configManager.getValue(ServerConstants.PARAM_THEME_ID);
				}
				return _themeId;
			}

			public function hide() : void
			{
				this.visible = false;
			}
			
			public function get zoomRatio() : Number
			{
				return this._zoomRatio;
			}
			
			public function set zoomRatio(param1:Number) : void
			{
				this._zoomRatio = param1;
			}
			
			public function get charCanvasHeight() : Number
			{
				return this._charCanvasHeight;
			}
			
			public function set charCanvasHeight(param1:Number) : void
			{
				this._charCanvasHeight = param1;
			}
			
			public function get shouldPauseOnLoadBytesComplete() : Boolean
			{
				return this._shouldPauseOnLoadByteComplete;
			}
			
			public function set shouldPauseOnLoadBytesComplete(param1:Boolean) : void
			{
				this._shouldPauseOnLoadByteComplete = param1;
			}
			
			public function CharPreview() : void
			{
				this._customColor = new UtilHashArray();
				var charMaker:CustomCharacterMaker = new CustomCharacterMaker();
				charMaker.name = this.LOADER;
				charMaker.visible = false;
				charMaker.scaleX = -1;
				this._orgX = this.width * 0.4;
				this._orgY = this.height * 0.5;
				this._tarX = this.width * 0.6;
				this._tarY = this.height * 0.8;
				this.myUI = new UIComponent();
				this.myUI.addChild(charMaker);
				this._orgRatio = CcLibConstant.DEFAULT_PREVIEW_SCALE;
				this.addChild(this.myUI);
				this.charCanvasHeight = this.height;
			}
			
			private function loadCCCharComplete(param1:Event) : void
			{
			}

			/**
			 * @param ccChar cc char
			 * @param actionId action id
			 * @param param3 facial id
			 */
			public function initByCcChar(ccChar:CCBodyModel, actionId:String, facialId:String = "") : void
			{
				if (this._isBuilding == 1)
				{
					return;
				}
				this._isBuilding = 1;
				NativeCursorManager.instance.setBusyCursor();
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).destroy();
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).ver = ccChar.version;
				//CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).visible = false;

				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).initByXml(ccChar.serialize());
				
				return;
			}

			/**
			 * @param ccChar cc char
			 * @param actionId action id
			 * @param param3 facial id
			 */
			public function initByCcBody(ccChar:CCBodyModel, theme:CCThemeModel) : void
			{
				if (this._isBuilding == 1)
				{
					return;
				}
				this._isBuilding = 1;
				NativeCursorManager.instance.setBusyCursor();
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).destroy();
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).ver = ccChar.version;
				//CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).visible = false;

				var actionId:String = theme.getCharacterDefaultActionId(ccChar.bodyShapeId);
				var cam:CCCharacterActionModel = theme.getCharacterActionModel(ccChar, actionId);
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).initByCam(cam);
				
				return;
			}
			
			private function reloadCharSkin(param1:Event = null) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).reloadSkin();
			}
			
			public function switchLibrary(param1:CcComponent, param2:CcCharacter) : void
			{
				// var _loc3_:CcLibrary = new CcLibrary();
				// _loc3_.type = param1.componentThumb.type;
				// _loc3_.component_id = param1.componentThumb.componentId;
				// _loc3_.theme_id = param1.componentThumb.themeId;
				// var _loc4_:ExtraDataLoader = new ExtraDataLoader();
				// var _loc5_:Object;
				// (_loc5_ = new Object())["library"] = _loc3_;
				// _loc4_.extraData = _loc5_;
				// _loc4_.contentLoaderInfo.addEventListener(Event.COMPLETE,this.onLoadLibrary);
				// _loc4_.load(UtilNetwork.getGetCcLibraryFileRequest(_loc3_.theme_id,_loc3_.type,_loc3_.component_id));
			}
			
			public function switchComponent(param1:CcComponent, param2:CcCharacter, param3:String, param4:String = "") : void
			{
				// var _loc5_:CcAction = null;
				// var _loc6_:CcSelection = null;
				// var _loc7_:CcState = null;
				// var _loc8_:CcFacial = null;
				// var _loc9_:CcSelection = null;
				// var _loc10_:CcSelection = null;
				// var _loc11_:CcComponentThumb = null;
				// var _loc12_:UtilLoadMgr = null;
				// if(param1 != null && param1.componentThumb.type != CcLibConstant.COMPONENT_TYPE_FREEACTION && param1.componentThumb.type != CcLibConstant.COMPONENT_TYPE_SKELETON && param1.componentThumb.type != CcLibConstant.COMPONENT_TYPE_BODYSHAPE)
				// {
				// 	_loc6_ = (_loc5_ = param2.bodyShape.getActionById(param3)).getSelectionByComponentType(param1.componentThumb.type);
				// 	_loc7_ = null;
				// 	if(_loc6_ != null)
				// 	{
				// 		_loc7_ = param1.componentThumb.getStateByStateId(_loc6_.stateId);
				// 	}
				// 	else if(param4 == "")
				// 	{
				// 		_loc10_ = _loc5_.getSelectionByComponentType("facial");
				// 		_loc9_ = (_loc8_ = param2.getFacialByFacialId(_loc10_.facialId)).selections.getValueByKey(param1.componentThumb.type) as CcSelection;
				// 		_loc7_ = param1.componentThumb.getStateByStateId(_loc9_.stateId);
				// 	}
				// 	else
				// 	{
				// 		_loc9_ = (_loc8_ = param2.getFacialByFacialId(param4)).selections.getValueByKey(param1.componentThumb.type) as CcSelection;
				// 		_loc7_ = param1.componentThumb.getStateByStateId(_loc9_.stateId);
				// 	}
				// 	if(_loc7_ != null)
				// 	{
				// 		_loc11_ = param1.componentThumb;
				// 		(_loc12_ = new UtilLoadMgr()).setExtraData({
				// 			"component":param1,
				// 			"ccChar":param2,
				// 			"actionId":param3,
				// 			"facialId":param4
				// 		});
				// 		if(_loc7_.imageData == null)
				// 		{
				// 			_loc12_.addEventListener(LoadMgrEvent.ALL_COMPLETE,this.onLoadStateImageData);
				// 			_loc12_.addEventDispatcher(_loc7_,CcComponentLoadEvent.LOAD_STATE_IMAGE_DATA_COMPLETE);
				// 			_loc7_.loadImageData(UtilNetwork.getGetCcComponentStateFileRequest(param1.componentThumb.themeId,param1.componentThumb.type,param1.componentThumb.path,_loc7_.filename));
				// 		}
				// 		else
				// 		{
				// 			_loc12_.addEventListener(LoadMgrEvent.ALL_COMPLETE,this.onReadyComponent);
				// 			this.changeComponent(param1,param3,param4,param2,_loc12_);
				// 		}
				// 		_loc12_.commit();
				// 	}
				// }
			}
			
			public function initByCcCharAfterSkeleton(param1:CcCharacter, param2:String, param3:String = "") : void
			{
				// var _loc8_:int = 0;
				// var _loc9_:Sprite = null;
				// var _loc10_:CcComponent = null;
				// var _loc4_:DisplayObjectContainer = UtilPlain.getInstance(this.myUI,AnimeConstants.MOVIECLIP_DEFAULT_HEAD);
				// var _loc5_:Array = CcLibConstant.GET_COMPONENT_ORDER_IN_HEAD;
				// CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateBodyScale(param1.bodyScale.x,param1.bodyScale.y);
				// CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateHeadScale(param1.headScale.x,param1.headScale.y);
				// CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateHeadPos(param1.headShift.x,param1.headShift.y);
				// if(_loc4_ != null)
				// {
				// 	_loc8_ = 0;
				// 	while(_loc8_ < _loc5_.length)
				// 	{
				// 		(_loc9_ = new Sprite()).name = _loc5_[_loc8_] + this.MC;
				// 		_loc4_.addChild(_loc9_);
				// 		_loc8_++;
				// 	}
				// }
				// var _loc6_:Number = param1.getUserChosenComponentSize();
				// var _loc7_:int = 0;
				// while(_loc7_ < _loc6_)
				// {
				// 	_loc10_ = param1.getUserChosenComponentByIndex(_loc7_);
				// 	if(CcLibConstant.ALL_LIBRARY_TYPES.indexOf(_loc10_.componentThumb.type) == -1)
				// 	{
				// 		this.switchComponent(_loc10_,param1,param2,param3);
				// 	}
				// 	_loc7_++;
				// }
			}
			
			private function onLoadSkeletonImageData(param1:LoadMgrEvent) : void
			{
				// var _loc2_:UtilLoadMgr = param1.target as UtilLoadMgr;
				// var _loc3_:Object = _loc2_.getExtraData();
				// var _loc4_:UtilLoadMgr;
				// (_loc4_ = new UtilLoadMgr()).setExtraData(_loc3_);
				// _loc4_.addEventListener(LoadMgrEvent.ALL_COMPLETE,this.onReadySkeleton);
				// this.changeComponent(_loc3_["component"],_loc3_["actionId"],_loc3_["facialId"],_loc3_["ccChar"],_loc4_);
				// _loc4_.commit();
			}
			
			private function onReadySkeleton(param1:LoadMgrEvent) : void
			{
				// IEventDispatcher(param1.target).removeEventListener(param1.type,this.onReadySkeleton);
				// NativeCursorManager.instance.removeBusyCursor();
				// var _loc2_:UtilLoadMgr = param1.target as UtilLoadMgr;
				// var _loc3_:Object = _loc2_.getExtraData();
				// this.initByCcCharAfterSkeleton(_loc3_["ccChar"],_loc3_["actionId"],_loc3_["facialId"]);
			}
			
			private function onLoadStateImageData(param1:LoadMgrEvent) : void
			{
				// IEventDispatcher(param1.target).removeEventListener(param1.type,this.onLoadStateImageData);
				// var _loc2_:UtilLoadMgr = param1.target as UtilLoadMgr;
				// var _loc3_:Object = _loc2_.getExtraData();
				// var _loc4_:UtilLoadMgr;
				// (_loc4_ = new UtilLoadMgr()).setExtraData(_loc3_);
				// _loc4_.addEventListener(LoadMgrEvent.ALL_COMPLETE,this.onReadyComponent);
				// this.changeComponent(_loc3_["component"],_loc3_["actionId"],_loc3_["facialId"],_loc3_["ccChar"],_loc4_);
				// _loc4_.commit();
			}
			
			private function onCCReady(param1:Event) : void
			{
				this.updateCCPosition();
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).visible = true;
				this._isBuilding = 2;
				if(this._isRandom)
				{
					this.onRandomCharacterComplete();
					this._isRandom = false;
				}
				this.dispatchEvent(new LoadEmbedMovieEvent(LoadEmbedMovieEvent.COMPLETE_EVENT));
			}
			
			private function onReadyComponent(param1:LoadMgrEvent) : void
			{
				try
				{
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).shouldPauseOnLoadBytesComplete = this.shouldPauseOnLoadBytesComplete;
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).addEventListener(LoadEmbedMovieEvent.COMPLETE_EVENT,this.onCCReady);
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).onReady();
				}
				catch(e:Error)
				{
				}
			}
			
			public function onRandomCharacterComplete() : void
			{
				this.playBlurEffect();
			}
			
			private function playBlurEffect() : void
			{
				this.fadeIn.play();
			}
			
			public function updateColor(param1:CcColor) : void
			{
				var _loc2_:Object = null;
				try
				{
					_loc2_ = new Object();
					_loc2_["colorReference"] = param1.ccColorThumb.colorReference;
					_loc2_["originalColor"] = param1.ccColorThumb.isOriginalColorExist ? param1.ccColorThumb.originalColor : uint.MAX_VALUE;
					_loc2_["colorValue"] = param1.colorValue;
					_loc2_["targetComponentId"] = param1.ccComponent == null ? "" : param1.ccComponent.id;
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateColor(_loc2_);
				}
				catch(e:Error)
				{
				}
			}
			
			public function removeColorOfThumb(param1:CcComponent, param2:CcCharacter) : Array
			{
				var _loc6_:CcColor = null;
				var _loc3_:Number = param2.getUserChosenColorNum();
				var _loc4_:Array = new Array();
				var _loc5_:int = _loc3_ - 1;
				while(_loc5_ >= 0)
				{
					if((_loc6_ = param2.getUserChosenColorByIndex(_loc5_)).ccColorThumb.componentType == param1.componentThumb.type)
					{
						param2.removeUserChosenColorByIndex(_loc5_);
						_loc4_.push(_loc6_.ccColorThumb.colorReference);
						CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).deleteColorByArea(_loc6_.ccColorThumb.colorReference);
					}
					_loc5_--;
				}
				return _loc4_;
			}
			
			public function removeColorByRefs(param1:Array) : void
			{
				var _loc4_:String = null;
				var _loc2_:Number = param1.length;
				var _loc3_:int = _loc2_ - 1;
				while(_loc3_ >= 0)
				{
					_loc4_ = String(param1[_loc3_]);
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).deleteColorByArea(_loc4_);
					_loc3_--;
				}
			}
			
			private function zoomEffectCompleted() : void
			{
				dispatchEvent(new CcCharPreviewerEvent(CcCharPreviewerEvent.ZOOM_EFFECT_COMPLETED,this));
			}
			
			public function zoomInFacialWithoutDisplacement() : void
			{
			}
			
			public function zoomInFacial() : void
			{
			}
			
			private function getZoomedScale() : Number
			{
				var _loc1_:Number = NaN;
				if(UtilLicense.getCurrentLicenseId() == "8")
				{
					_loc1_ = 0.9;
				}
				else if(themeId == ThemeConstants.ANIME_THEME_ID)
				{
					_loc1_ = 1.2;
				}
				else if(themeId == ThemeConstants.NINJAANIME_THEME_ID)
				{
					_loc1_ = 1.2;
				}
				else
				{
					_loc1_ = 1;
				}
				try
				{
				}
				catch(e:Error)
				{
				}
				return _loc1_;
			}
			
			private function getZoomedPosition(param1:Number) : Point
			{
				return new Point();
			}
			
			public function zoomOutFacial() : void
			{
			}

			public function changeComponent(param1:CcComponent, param2:String, param3:String, param4:CcCharacter, param5:UtilLoadMgr) : void
			{
				var properties:Object;
				var colors:Array;
				var num:Number;
				var i:int;
				var stateId:String = null;
				var selection:CcSelection = null;
				var state:CcState = null;
				var facialSelection:CcSelection = null;
				var facial:CcFacial = null;
				var fSelection:CcSelection = null;
				var color:CcColor = null;
				var colorObj:Object = null;
				var ccComponent:CcComponent = param1;
				var actionId:String = param2;
				var facialId:String = param3;
				var ccChar:CcCharacter = param4;
				var loadMgr:UtilLoadMgr = param5;
				var action:CcAction = ccChar.bodyShape.getActionById(actionId);
				if(ccComponent.componentThumb.type != CcLibConstant.COMPONENT_TYPE_FREEACTION)
				{
					selection = action.getSelectionByComponentType(ccComponent.componentThumb.type);
					if(selection == null)
					{
						facialSelection = action.getSelectionByComponentType("facial");
						if(facialId != null && facialId.length > 0)
						{
							facial = ccChar.getFacialByFacialId(facialId);
						}
						else
						{
							facial = ccChar.getFacialByFacialId(facialSelection.facialId);
						}
						fSelection = facial.selections.getValueByKey(ccComponent.componentThumb.type) as CcSelection;
						state = ccComponent.componentThumb.getStateByStateId(fSelection.stateId);
						stateId = state.stateId;
					}
					else
					{
						stateId = selection.stateId;
					}
				}
				properties = {
					"x":ccComponent.x,
						"y":ccComponent.y,
						"xscale":ccComponent.xscale,
						"yscale":ccComponent.yscale,
						"offset":ccComponent.offset,
						"rotation":ccComponent.rotation,
						"split":ccComponent.split
				};
				colors = new Array();
				num = ccChar.getUserChosenColorNum();
				i = 0;
				while(i < num)
				{
					color = ccChar.getUserChosenColorByIndex(i);
					if(color.ccColorThumb.componentType == ccComponent.componentThumb.type || color.ccColorThumb.colorReference == "ccSkinColor" || color.ccColorThumb.colorReference == "ccFaceHairColor")
					{
						colorObj = new Object();
						colorObj["colorReference"] = color.ccColorThumb.colorReference;
						colorObj["originalColor"] = color.ccColorThumb.isOriginalColorExist ? color.ccColorThumb.originalColor : uint.MAX_VALUE;
						colorObj["colorValue"] = color.colorValue;
						colorObj["targetComponentId"] = color.ccComponent == null ? "" : color.ccComponent.id;
						colors.push(colorObj);
					}
					i++;
				}
				try
				{
					if(stateId == null)
					{
						CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateComponentImageData(ccComponent.componentThumb.type,action.imageData,properties,loadMgr,colors,ccComponent.id);
					}
					else
					{
						CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateComponentImageData(ccComponent.componentThumb.type,ccComponent.componentThumb.getStateByStateId(stateId).imageData,properties,loadMgr,colors,ccComponent.id);
					}
				}
				catch(e:Error)
				{
				}
			}
			
			public function highlightComponent(bodyCmpnt:CCBodyComponentModel) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).highlightComponent(bodyCmpnt.id);
			}
			
			public function removeHighlightComponent(bodyCmpnt:CCBodyComponentModel) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).removeHighlight(bodyCmpnt.id);
			}
			
			public function removeComponent(bodyCmpnt:CCBodyComponentModel) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).removeComponentById(bodyCmpnt.id);
			}
			
			public function updateLocation(param1:CcComponent) : void
			{
				var _loc2_:Object = {
					"x":param1.x,
						"y":param1.y,
						"xscale":param1.xscale,
						"yscale":param1.yscale,
						"offset":param1.offset,
						"rotation":param1.rotation
				};
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateLocation(param1.componentThumb.type,_loc2_,CcLibConstant.ALL_MULTIPLE_COMPONENT_TYPES.indexOf(param1.componentThumb.type) > -1 ? param1.id : "");
				if(param1.componentThumb.type == CcLibConstant.COMPONENT_TYPE_HAIR)
				{
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateLocation(CcLibConstant.COMPONENT_TYPE_FRONT_HAIR,_loc2_,"");
					CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateLocation(CcLibConstant.COMPONENT_TYPE_BACK_HAIR,_loc2_,"");
				}
			}
			
			public function capCharAsBitmap() : BitmapData
			{
				var _loc1_:BitmapData = null;
				return CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).getBitmap();
			}
			
			public function setHeadScale(param1:Number, param2:Number) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateHeadScale(param1,param2);
				this.updateCCPosition();
			}
			
			public function setBodyScale(param1:Number, param2:Number) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateBodyScale(param1,param2);
				this.updateCCPosition();
			}
			
			public function resetHeadPos() : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).resetHeadPos();
			}
			
			public function setHeadPos(param1:Number = 0, param2:Number = 0) : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).updateHeadPos(param1,param2);
			}
			
			public function getHeadScale() : Point
			{
				return new Point(CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).head.scaleX,CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).head.scaleY);
			}
			
			public function getBodyScale() : Point
			{
				return new Point(CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).bodyScale,CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).bodyScale);
			}
			
			public function getHeadPos() : Point
			{
				return CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).headPos;
			}
			
			private function updateCCPosition() : void
			{
				var _loc1_:Rectangle = CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).getBounds(this.myUI);
				var _loc2_:Number = _loc1_.height + _loc1_.y;
				if(this.showFace)
				{
					this.myUI.y = this.height - 40;
				}
				else
				{
					this.myUI.y = this.height - _loc2_;
				}
				this.myUI.x = this.width / 2;
			}
			
			public function get ccMaker() : CustomCharacterMaker
			{
				return CustomCharacterMaker(this.myUI.getChildByName(this.LOADER));
			}
			
			public function capFaceAsBitmap() : BitmapData
			{
				var _loc1_:BitmapData = null;
				return CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).getHeadBitmap();
			}
			
			public function reloadSkin() : void
			{
				CustomCharacterMaker(this.myUI.getChildByName(this.LOADER)).reloadSkin();
			}
		]]>
	</fx:Script>

</mx:Canvas>
