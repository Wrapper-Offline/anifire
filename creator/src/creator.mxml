<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:component="anifire.component.*"
			   xmlns:components="anifire.creator.components.*"
			   width="100%" height="549" preinitialize="initApp()" applicationComplete="onApplicationComplete()"
			   backgroundAlpha="0" creationPolicy="auto"
			   implements="anifire.creator.interfaces.ICcMainUiContainer"
			   >

	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace aComponents "anifire.components.*";
		@namespace components "anifire.creator.components.*";

		global
		{
			layoutDirection: "ltr";
		}
		s|Application
		{
			backgroundColor: #E6E5F1;
			font-size: 13;
		}
		s|HScrollBar
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultHScrollBarSkin");
		}
		s|VScrollBar
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultVScrollBarSkin");
		}
		s|TextBase,
		s|SkinnableTextBase,
		s|RichEditableText
		{
			color: #515969;
			fontStyle: normal;
			fontFamily: "StudioSparkMain";
		}
		s|Label#promptDisplay
		{
			color: #CCCCCC;
			fontStyle: "normal";
		}
		s|RichText#errorTextDisplay
		{
			fontSize: 11;
		}
		s|TextInput
		{
			borderColor: #CACAD4;
			skinClass: ClassReference("anifire.creator.skins.DefaultTextInputSkin");
		}
		s|Button.primary
		{
			skinClass: ClassReference("anifire.creator.skins.PrimaryButtonSkin");
		}
		s|Button.default
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultButtonSkin");
		}
		components|IconButton
		{
			skinClass: ClassReference("anifire.creator.skins.IconButtonSkin");
		}
		aComponents|IconButton.topToolBar
		{
			skinClass: ClassReference("anifire.creator.skins.TopToolBarButtonSkin");
		}
		components|MenuItemList
		{
			skinClass: ClassReference("anifire.creator.skins.MenuItemListSkin");
		}
		components|ColorPicker
		{
			skinClass: ClassReference("anifire.creator.skins.FlatColorPickerSkin");
		}
		components|ArrowTipContainer
		{
			skinClass: ClassReference("anifire.creator.skins.ArrowTipContainerSkin");
		}
		components|ComponentItemRenderer
		{
			backgroundColor: #E6E5F1;
			borderColor: #CECCDE;
		}
		components|ComponentItemRenderer:hovered
		{
			backgroundColor: #FFEAF4;
			borderColor: #E4B0C5;
		}
		components|ComponentItemRenderer:selectedAndShowsCaret
		{
			backgroundColor: #FFDBE8;
			borderColor: #E686A9;
		}
		s|DropDownList
		{
			skinClass: ClassReference("anifire.creator.skins.DefaultDropDownListSkin");
		}
		components|ConfirmPopUp
		{
			skinClass: ClassReference("anifire.creator.skins.ConfirmPopUpSkin");
			fontSize: 14;
		}
		s|Panel
		{
			skinClass: ClassReference("anifire.creator.skins.ConfirmPanelSkin");
		}
		
		@font-face {
            src: url("../fonts/files/Lato-Regular.ttf");
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
        @font-face {
            src: url("../fonts/files/Lato-Italic.ttf");
            fontStyle: italic;
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
        @font-face {
            src: url("../fonts/files/Lato-Bold.ttf");
            fontWeight: 700;
            fontFamily: StudioSparkMain;
            embedAsCFF: true;
        }
	</fx:Style>

	<fx:Script>
		<![CDATA[
			import anifire.constant.ServerConstants;
			import anifire.creator.core.CcConsole;
			import anifire.creator.events.CcCoreEvent;
			import anifire.creator.components.EditView;
			import anifire.managers.AppConfigManager;
			import anifire.util.Util;
			import anifire.util.UtilErrorLogger;
			import anifire.utils.SecurityUtils;
			import flash.external.ExternalInterface;

			private var _ccConsole:CcConsole;
			private var _componentInit:Boolean;
			private var _resourceInit:Boolean;

			private function initApp() : void
			{
				SecurityUtils.init();
				AppConfigManager.instance;
				Util.loadClientLocale("go", this.onResourceComplete);
			}

			private function loadDarkMode() : void
			{
				if (!ExternalInterface.available)
				{
					return;
				}
				var darkMode:Boolean = ExternalInterface.call("Page.isDarkMode");
				if (!darkMode)
				{
					return;
				}
				var config:AppConfigManager = AppConfigManager.instance;
				var path:String = config.getValue(ServerConstants.FLASHVAR_CLIENT_THEME_PATH);
				var match:RegExp = new RegExp(ServerConstants.FLASHVAR_CLIENT_THEME_PLACEHOLDER, "g");
				path = path.replace(match, "client_theme/darkStyling.swf");
				styleManager.loadStyleDeclarations(path, true, false, ApplicationDomain.currentDomain);
			}

			private function onResourceComplete(param1:Event = null) : void
			{
				// make sure the resources and the application
				// are ready before we get things up and running
				this._resourceInit = true;
				if (this._componentInit)
				{
					this.initConsole();
				}
			}

			private function onApplicationComplete() : void
			{
				this.loadDarkMode();
				this._componentInit = true;
				if (this._resourceInit)
				{
					this.initConsole();
				}
			}

			private function initConsole() : void
			{
				CcConsole.init(this);
				this._ccConsole = CcConsole.instance;
				this._ccConsole.addEventListener(CcCoreEvent.LOAD_EVERYTHING_COMPLETE, this.loadComplete);
			}
			
			private function loadComplete(param1:Event) : void
			{
				this.setCurrentState("editor");
			}

			private function uncaughtErrorHandler(param1:UncaughtErrorEvent) : void
			{
				UtilErrorLogger.getInstance().fatal("uncaughtErrorHandler: " + new Error().getStackTrace());
			}

			public function get mui_editView() : EditView
			{
				return this.editView;
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="loading"/>
		<s:State name="editor"/>
	</s:states>

	<components:EditView id="editView" width="100%" height="100%" visible="false" visible.editor="true"/>
	<component:EyeDropperScreenOverlay id="eyedropperScreenCap"/>
	<components:CCLoadingScreen includeIn="loading"/>

</s:Application>
