<?xml version="1.0" encoding="utf-8"?>
<s:HGroup
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:components="anifire.creator.components.*"
	verticalAlign="middle">

	<fx:Script>
		<![CDATA[
			import anifire.constant.CcLibConstant;
			import anifire.creator.core.CcConsole;
			import anifire.creator.events.CcComponentTypeChooserEvent;
			import anifire.models.creator.CCBodyModel;
			import anifire.models.creator.CCComponentModel;
			import anifire.models.creator.CCThemeModel;
			import anifire.util.UtilDict;
			import anifire.util.UtilHashArray;
			import spark.events.IndexChangeEvent;
			import anifire.models.creator.CCLibraryModel;
			import org.apache.flex.collections.VectorList;

			private static var TRANSITION:String = "easeOut";
			private static var CAN_BG:String = "bg";
			private static var CAN_CIRCLE:String = "circle";
			private static var CAN_CURRENTICON:String = "currentIcon";
			private static var CAN_ICONIMAGE:String = "iconImage";
			private static var CAN_ICONPREVIOUS:String = "iconPrevious";
			private static var CAN_ICONNEXT:String = "iconNext";
			private var components:Array;
			private var currentComponentIndex:int;
			private var STEP_BUTTONS:Object;
			private var _propChanged:Object;

			override protected function createChildren() : void
			{
				super.createChildren();
			}
			
			public function init(ccTheme:CCThemeModel, ccChar:CCBodyModel, param3:Boolean = true) : void
			{
				var displayList:Array = new Array();
				var multipleBses:Boolean = ccTheme.bodyShapes.length > 1;
				this.components = new Array();
				var order:Array = ccChar.version == 2 ?
					CcLibConstant.COMPONENT_TYPE_CHOOSER_ORDERING_VER2 :
					CcLibConstant.COMPONENT_TYPE_CHOOSER_ORDERING_VER1;
				for (var typeObj:String in this.typeList.source)
				{
					var type:String = this.typeList.source[typeObj].label;
					var pushType:Boolean = false;
					if (type == CcLibConstant.COMPONENT_TYPE_BODYSHAPE)
					{
						if (multipleBses && CcLibConstant.BODYSHAPE_CHOOSABLE || CcLibConstant.CHOOSE_TAG_TYPE_SEX)
						{
							pushType = true;
						}
					}
					else if (CcLibConstant.COMPONENT_TYPE_CHOOSER_COMPONENT_GROUP.indexOf(type) >= 0)
					{
						pushType = true;
					}
					else
					{
						var searchArr:*;
						if (CcLibConstant.ALL_LIBRARY_TYPES.indexOf(type) > -1)
						{
							searchArr = ccTheme.bodyShapes[ccChar.bodyShapeId].getLibrariesByType(type);
						}
						else
						{
							searchArr = ccTheme.bodyShapes[ccChar.bodyShapeId].getComponentsByType(type);
							if (searchArr.length <= 0)
							{
								searchArr = ccTheme.getComponentsByType(type);
							}
						}

						var matchCount:int = 0;
						for (var index:int = 0; index < searchArr.length; index++)
						{
							if (searchArr[index].enable)
							{
								var filter:Function = CcConsole.instance.configuration.goTagFilter;
								if (filter(searchArr[index]))
								{
									matchCount++;
								}
							}
						}


						var minCmpnts:Number = CcLibConstant.ALL_MULTIPLE_COMPONENT_TYPES.indexOf(type) > -1 ? 0 : 1;
						if (matchCount >= minCmpnts)
						{
							pushType = true;
						}
					}
					
					if (pushType && order.indexOf(type) > -1)
					{
						this.components.push(type);
						displayList.push(this.typeList.source[typeObj]);
					}
				}
				this.confirmTypeList.source = displayList;
				this.currentComponentIndex = 0;
				this.switchToComponentType(this.components[this.currentComponentIndex],param3);
			}
			
			override public function styleChanged(param1:String) : void
			{
				var _loc3_:String = null;
				var _loc4_:* = undefined;
				super.styleChanged(param1);
				var _loc2_:Array = ["percentWidth","navMarginRight"];
				if(param1 == null || _loc2_.indexOf(param1) >= 0)
				{
					for each(_loc3_ in _loc2_)
					{
						if((_loc4_ = getStyle(_loc3_)) != undefined)
						{
							this._propChanged[_loc3_] = _loc4_;
						}
					}
				}
			}
			
			private function prepare() : void
			{
			}
			
			public function switchToComponentType(param1:String = "", dispatchEvent:Boolean = true) : void
			{
				this.currentComponentIndex = this.components.indexOf(param1);
				this.canQuickBar.selectedIndex = this.currentComponentIndex;
				if (dispatchEvent)
				{
					this.tellEverybodyComponentTypeChosen(param1);
				}
			}
			
			private function tellEverybodyComponentTypeChosen(param1:String) : void
			{
				var _loc2_:CcComponentTypeChooserEvent = new CcComponentTypeChooserEvent(CcComponentTypeChooserEvent.COMPONENT_TYPE_CHOSEN,this);
				_loc2_.componentType = param1;
				this.dispatchEvent(_loc2_);
			}
			
			private function onButtonBarChange(param1:IndexChangeEvent) : void
			{
				var _loc3_:String = null;
				var _loc2_:int = int(param1.newIndex);
				if(_loc2_ >= 0)
				{
					_loc3_ = String(this.confirmTypeList.source[_loc2_].label);
					this.switchToComponentType(_loc3_);
				}
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<s:ArrayList id="typeList">
			<fx:Object label="componentGroupClothes" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="GoUpper" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="GoLower" icon="@Embed('../images/componentIcons/lower.png')"/>
			<fx:Object label="GoHands" icon="@Embed('../images/componentIcons/hand.png')"/>
			<fx:Object label="GoFeet" icon="@Embed('../images/componentIcons/shoes.png')"/>
			<fx:Object label="GoBehindBody" icon="@Embed('../images/componentIcons/back.png')"/>
			<fx:Object label="GoHair" icon="@Embed('../images/componentIcons/hair.png')"/>
			<fx:Object label="upper_body" icon="@Embed('../images/componentIcons/upper.png')"/>
			<fx:Object label="lower_body" icon="@Embed('../images/componentIcons/lower.png')"/>
			<fx:Object label="faceshape" icon="@Embed('../images/componentIcons/face.png')"/>
			<fx:Object label="hair" icon="@Embed('../images/componentIcons/hair.png')"/>
			<fx:Object label="beard" icon="@Embed('../images/componentIcons/beard.png')"/>
			<fx:Object label="mouth" icon="@Embed('../images/componentIcons/mouth.png')"/>
			<fx:Object label="ear" icon="@Embed('../images/componentIcons/ear.png')"/>
			<fx:Object label="mustache" icon="@Embed('../images/componentIcons/mustache.png')"/>
			<fx:Object label="eye" icon="@Embed('../images/componentIcons/eyes.png')"/>
			<fx:Object label="eyebrow" icon="@Embed('../images/componentIcons/eyebrows.png')"/>
			<fx:Object label="nose" icon="@Embed('../images/componentIcons/nose.png')"/>
			<fx:Object label="glasses" icon="@Embed('../images/componentIcons/glasses.png')"/>
			<fx:Object label="facedecoration" icon="@Embed('../images/componentIcons/faceDecorations.png')"/>			
		</s:ArrayList>
	</fx:Declarations>

	<s:ButtonBar
		id="canQuickBar"
		x="0"
		height="45"
		visible="true"
		verticalCenter="0"
		requireSelection="true"
		skinClass="anifire.creator.skins.HButtonBarSkin"
		change="onButtonBarChange(event)">
		<s:dataProvider>
			<s:ArrayList id="confirmTypeList"/>
		</s:dataProvider>
	</s:ButtonBar>
</s:HGroup>
