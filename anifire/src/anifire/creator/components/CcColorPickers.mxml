<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx">

	<fx:Script>
		<![CDATA[
			import anifire.creator.events.CcColorPickerEvent;
			import anifire.models.creator.CCBodyComponentModel;
			import anifire.models.creator.CCThemeModel;
			import anifire.models.creator.CCBodyModel;
			import anifire.models.creator.CCColor;

			private var colorThumb:CCColor;
			private var _biggerElementWidth:Number;
			private var _smallerElementWidth:Number;
			private const DELAY_BETWEEN_LOADING_EACH_THUMB:Number = 200;

			public function set biggerElementWidth(param1:Number) : void
			{
				this._biggerElementWidth = param1;
			}
			
			public function set smallerElementWidth(param1:Number) : void
			{
				this._smallerElementWidth = param1;
			}

			public function addLibraryType(type:String, theme:CCThemeModel, ccChar:CCBodyModel) : void
			{
				var color:CCColor;
				var colors:Vector.<CCColor> = new Vector.<CCColor>();
				for (var colorType:String in theme.colors)
				{
					color = theme.colors[colorType];
					if (color.targetComponent == type)
					{
						colors.push(color);
					}
				}
				if (colors.length > 0)
				{
					for (var index2:int = 0; index2 < colors.length; index2++)
					{
						color = colors[index2] as CCColor;
						this.addColorPicker(color, theme, ccChar);	
					}
				}
			}

			/**
			 * Adds a component to the list of color pickers
			 * using its type.
			 */
			public function addComponentType(type:String, theme:CCThemeModel, ccChar:CCBodyModel) : void
			{
				var color:CCColor;
				var colors:Vector.<CCColor> = new Vector.<CCColor>();
				for (var colorType:String in theme.colors)
				{
					color = theme.colors[colorType];
					if (color.targetComponent == type)
					{
						colors.push(color);
					}
				}
				if (colors.length > 0)
				{
					for (var index2:int = 0; index2 < colors.length; index2++)
					{
						color = colors[index2] as CCColor;
						this.addColorPicker(color, theme, ccChar);	
					}
				}
			}
			
			private function addColorPicker(color:CCColor, theme:CCThemeModel, ccChar:CCBodyModel) : void
			{
				var picker:CcColorPickerElementSpark = new CcColorPickerElementSpark();
				if (color.choices.length > 4)
				{
					picker.width = this._biggerElementWidth;
				}
				else
				{
					picker.width = this._smallerElementWidth;
				}
				picker.height = 30;
				picker.addEventListener(CcColorPickerEvent.COLOR_CHOSEN, this.onUserChooseColor);
				picker.callLater(picker.initByCcColor, [color]);
				this._pickers.addElement(picker);
			}
			
			private function onUserChooseColor(event:CcColorPickerEvent) : void
			{
				this.tellEveryBodyColorChosen(event.color, event.colorValue, event.undoable);
			}
			
			private function tellEveryBodyColorChosen(color:CCColor, colorValue:uint, undoable:Boolean = true) : void
			{
				var event:CcColorPickerEvent = new CcColorPickerEvent(CcColorPickerEvent.COLOR_CHOSEN, this);
				event.color = color;
				event.colorValue = colorValue;
				event.undoable = undoable;
				this.dispatchEvent(event);
			}
			
			public function destroy() : void
			{
				var _loc1_:int = 0;
				var _loc2_:CcColorPickerElementSpark = null;
				while(_loc1_ < this._pickers.numChildren)
				{
					_loc2_ = this._pickers.getChildAt(_loc1_) as CcColorPickerElementSpark;
					_loc2_.removeEventListener(CcColorPickerEvent.COLOR_CHOSEN, this.onUserChooseColor);
					_loc1_++;
				}
				this._pickers.removeAllElements();
			}

			/**
			 * Deprecated. Please use the `addComponentType` method
			 * instead.
			 */
			public function addComponentThumb(bodyCmpnt:CCBodyComponentModel, cmpntThumb:*, theme:CCThemeModel, ccChar:CCBodyModel) : void
			{}
		]]>
	</fx:Script>

	<s:VGroup id="_pickers"/>

</s:Group>
