<?xml version="1.0" encoding="utf-8"?>
<bSkins:ThumbImageBase xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		xmlns:bSkins="anifire.browser.skins.*">
	
	<!-- This file contains the character thumbnail element. -->	

	<fx:Script>
		<![CDATA[
			import anifire.browser.core.CharThumb;
			import anifire.browser.managers.ImageDataManager;
			import anifire.browser.models.CCThumb;
			import anifire.component.CustomCharacterMaker;
			import anifire.constant.AnimeConstants;
			import anifire.constant.ServerConstants;
			import anifire.constant.RaceConstants;
			import anifire.event.LoadEmbedMovieEvent;
			import anifire.event.StudioEvent;
			import anifire.managers.AppConfigManager;
			import anifire.models.creator.CCCharacterActionModel;
			import anifire.util.UtilCommonLoader;
			import anifire.util.UtilErrorLogger;
			import anifire.util.UtilHashBytes;
			import anifire.util.UtilPlain;
			import com.adobe.crypto.MD5;
			import mx.graphics.BitmapFillMode;
			import mx.graphics.BitmapScaleMode;
			import mx.graphics.codec.PNGEncoder;
			import mx.utils.Base64Encoder;

			private static var _configManager:AppConfigManager = AppConfigManager.instance;
			protected var _charThumb:CharThumb;
			protected var _captureTarget:DisplayObjectContainer;
			protected var _propReady:Boolean;
			protected var _imageUpdated:Boolean;
			protected var _loader:Loader;
			protected var _propLoader:Loader;
			protected var _createThumbnailByModel:Boolean;
			private var _ccMaker:CustomCharacterMaker;
			protected var _creator:CCThumb;

			override protected function loadProductImage() : void
			{
				this._charThumb = _product as CharThumb;
				var imageData:Object = ImageDataManager.instance.getImageData("charThumb", _product.themeId, _product.id);
				if (imageData)
				{
					this.imageContainer.source = imageData as BitmapData;
					displayImage();
				}
				else if (this._charThumb.thumbnailUrl)
				{
					this.loadThumbnailUrl();
				}
				else if (this._charThumb.raceCode != RaceConstants.SKINNED_SWF && Boolean(_product.imageData))
				{
					onLoadingComplete();
				}
				else
				{
					super.loadProductImage();
				}
			}
			
			public function loadThumbnailUrl() : void
			{
				this.imageContainer.source = this._charThumb.thumbnailUrl;
			}
			
			override protected function cancelProcessing() : void
			{
				if (_processing)
				{
					if (this._loader)
					{
						this._loader.contentLoaderInfo.removeEventListener(Event.INIT, this.onImageLoaderInit);
						if (Boolean(this._charThumb) && Boolean(this._charThumb.thumbnailUrl))
						{
							this._loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, this.onImageLoaderError);
						}
					}
					if (this._creator)
					{
						this._creator.removeEventListener(LoadEmbedMovieEvent.COMPLETE_EVENT, this.onCharacterMakerReady);
					}
					if (this._createThumbnailByModel)
					{
						this._charThumb.removeEventListener(StudioEvent.BODY_MODEL_COMPLETE, this.onBodyModelComplete);
						this._createThumbnailByModel = false;
					}
					this._captureTarget = null;
					_processing = false;
				}
			}
			
			override protected function processProductImage() : void
			{
				var dataIsImage:Boolean = _product.imageData is ByteArray;
				if (_product.raceCode == 0 || dataIsImage)
				{
					var image:ByteArray = dataIsImage ? _product.imageData as ByteArray : _product.imageData["figure"] as ByteArray;
					this._loader = new Loader();
					this._loader.contentLoaderInfo.addEventListener(Event.INIT, this.onImageLoaderInit);
					this._loader.loadBytes(image, UtilCommonLoader.externalLoaderContext);
				}
				else
				{
					this.createCC();
				}
			}
			
			private function createCC() : void
			{
				this._creator = new CCThumb();
				var _loc1_:Object = _product.imageData as Object;
				var _loc2_:XML = _loc1_["xml"] as XML;
				var _loc3_:CCCharacterActionModel = _loc1_["cam"] as CCCharacterActionModel;
				var _loc4_:UtilHashBytes = _loc1_["imageData"] as UtilHashBytes;
				var _loc5_:ByteArray = _product.raceCode == 2 ? _loc1_["figure"] : null;
				this._creator.addEventListener(LoadEmbedMovieEvent.COMPLETE_EVENT, this.onCharacterMakerReady);
				if (_loc2_)
				{
					this._creator.init(_loc2_, _loc4_, (_product as CharThumb).getLibraries(), _product.raceCode, _loc5_);
				}
				else if (_loc3_)
				{
					var _loc6_:CustomCharacterMaker = new CustomCharacterMaker();
					_loc6_.addEventListener(LoadEmbedMovieEvent.COMPLETE_EVENT, this.onCharacterMakerReady);
					_loc6_.initByCam(_loc3_);
					this._ccMaker = _loc6_;
				}
			}
			
			private function onCharacterMakerReady(param1:LoadEmbedMovieEvent) : void
			{
				this.cancelProcessing();
				this._captureTarget = this._ccMaker;
				updateThumbColor(this._captureTarget);
				this.loadProp();
			}
			
			private function loadProp() : void
			{
				var _loc1_:ByteArray = this._charThumb.propImageData as ByteArray;
				if (_loc1_)
				{
					this._propLoader = new Loader();
					this._propLoader.contentLoaderInfo.addEventListener(Event.INIT, this.onPropImageReady);
					this._propLoader.loadBytes(_loc1_);
				}
				else
				{
					this._propReady = true;
					invalidateDisplayList();
				}
			}
			
			private function onPropImageReady(param1:Event) : void
			{
				this._propLoader.removeEventListener(Event.COMPLETE, this.onPropImageReady);
				var _loc2_:DisplayObjectContainer = UtilPlain.getInstance(this._captureTarget, UtilPlain.THE_CHAR);
				if (_loc2_ != null)
				{
					var _loc3_:DisplayObjectContainer = UtilPlain.getHead(_loc2_);
					if (_loc3_ != null)
					{
						this._propLoader.name = AnimeConstants.MOVIECLIP_THE_WEAR;
						_loc3_.addChild(this._propLoader);
					}
				}
				this._propReady = true;
				invalidateDisplayList();
			}
			
			private function onImageLoaderInit(param1:Event) : void
			{
				this.cancelProcessing();
				UtilPlain.stopFamily(this._loader.content);
				this._captureTarget = this._loader;
				updateThumbColor(this._captureTarget);
				this.loadProp();
				this.displayImage();
			}
			
			private function onImageLoaderError(param1:Event) : void
			{
				UtilErrorLogger.getInstance().appendCustomError("Error loading thumbnail url: " + this._charThumb.thumbnailUrl);
				_processing = true;
				this._createThumbnailByModel = true;
				this._charThumb.addEventListener(StudioEvent.BODY_MODEL_COMPLETE, this.onBodyModelComplete);
				this._charThumb.loadDefaultActionByBodyModel();
			}
			
			private function onBodyModelComplete(param1:Event) : void
			{
				super.loadProductImage();
			}
			
			protected function captureBitmapData() : void
			{
				var _loc1_:Rectangle = this._captureTarget.getBounds(this._captureTarget);
				if (_loc1_.width > 0 && _loc1_.height > 0)
				{
					var _loc2_:BitmapData = new BitmapData(_loc1_.width, _loc1_.height, true, 0);
					_loc2_.draw(this._captureTarget, new Matrix(1, 0, 0, 1, -_loc1_.x, -_loc1_.y));
					ImageDataManager.instance.setImageData("charThumb", _product.themeId, _product.id, _loc2_);
					this._captureTarget = null;
					if (_loc2_.height > this.height || _loc2_.width > this.width)
					{
						this.imageContainer.fillMode = BitmapFillMode.SCALE;
						this.imageContainer.scaleMode = BitmapScaleMode.LETTERBOX;
					}
					else
					{
						this.imageContainer.fillMode = BitmapFillMode.CLIP;
					}
					this.imageContainer.source = _loc2_;
					displayImage();
					this.saveToServer(_loc2_);
				}
			}
			
			private function encodeBitmapData(param1:BitmapData) : String
			{
				var _loc2_:PNGEncoder = null;
				var _loc3_:ByteArray = null;
				var _loc4_:Base64Encoder = null;
				if (param1)
				{
					_loc2_ = new PNGEncoder();
					_loc3_ = _loc2_.encode(param1);
					if (_loc3_)
					{
						(_loc4_ = new Base64Encoder()).encodeBytes(_loc3_);
						return _loc4_.flush();
					}
				}
				return null;
			}
			
			private function saveToServer(param1:BitmapData) : void
			{
				var params:URLVariables = new URLVariables();
				_configManager.appendURLVariables(params);
				params["assetId"] = this._charThumb.id;
				if (this._ccMaker)
				{
					var bodyImage:BitmapData = this._ccMaker.getBitmap();
					params["thumbdata"] = this.encodeBitmapData(bodyImage);
					params["thumbdata_sum"] = MD5.hash(params["thumbdata"]);
				}
				if (this._ccMaker)
				{
					var headImage:BitmapData = this._ccMaker.getHeadBitmap();
					params["imagedata"] = this.encodeBitmapData(headImage);
					params["imagedata_sum"] = MD5.hash(params["imagedata"]);
				}
				var urlRequest:URLRequest = new URLRequest(ServerConstants.SERVER_API_PATH + "saveCCThumbs/");
				urlRequest.data = params;
				urlRequest.method = URLRequestMethod.POST;
				var urlLoader:URLLoader = new URLLoader();
				urlLoader.dataFormat = URLLoaderDataFormat.TEXT;
				urlLoader.addEventListener(Event.COMPLETE, this.onSaveThumbnailComplete);
				urlLoader.addEventListener(IOErrorEvent.IO_ERROR, this.onSaveThumbnailError);
				urlLoader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, this.onSaveThumbnailError);
				urlLoader.load(urlRequest);
			}
			
			private function onSaveThumbnailComplete(param1:Event) : void
			{
			}
			
			private function onSaveThumbnailError(param1:Event) : void
			{
			}
			
			override protected function removeImage() : void
			{
				this._imageUpdated = false;
				this.imageContainer.source = null;
				if (this._loader)
				{
					this._loader.unload();
				}
				this._creator = null;
			}
			
			override protected function updateDisplayList(param1:Number, param2:Number) : void
			{
				super.updateDisplayList(param1, param2);
				if (Boolean(this._captureTarget) && this._propReady)
				{
					this.captureBitmapData();
				}
			}
			
			private function onImageIOError(param1:Event) : void
			{
				_processing = true;
				this._createThumbnailByModel = true;
				this._charThumb.addEventListener(StudioEvent.BODY_MODEL_COMPLETE, this.onBodyModelComplete);
				this._charThumb.loadDefaultActionByBodyModel();
			}
			
			private function onImageComplete(param1:Event) : void
			{
				if (this.imageContainer.bitmapData.height > this.height || this.imageContainer.bitmapData.width > this.width)
				{
					this.imageContainer.fillMode = BitmapFillMode.SCALE;
					this.imageContainer.scaleMode = BitmapScaleMode.LETTERBOX;
				}
				else
				{
					this.imageContainer.fillMode = BitmapFillMode.CLIP;
				}
				this.displayImage();
			}
		]]>
	</fx:Script>

	<bSkins:states>
		<s:State name="normal"/>
		<s:State name="loading" stateGroups="busyStates"/>
		<s:State name="processing" stateGroups="busyStates"/>
		<s:State name="ready"/>
	</bSkins:states>
	
	<s:Group width="100%" height="100%" clipAndEnableScrolling="true">
		<s:BitmapImage scaleMode="letterbox" width="100%" height="100%" smooth="true" horizontalCenter="0" verticalCenter="0" ioError="onImageIOError(event)" complete="onImageComplete(event)" id="imageContainer"/>
	</s:Group>
	<bSkins:BusyIndicator itemCreationPolicy="deferred" includeIn="busyStates" horizontalCenter="0" verticalCenter="0" symbolColor="0x000000"/>

</bSkins:ThumbImageBase>
