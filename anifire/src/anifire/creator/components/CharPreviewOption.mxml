<?xml version="1.0" encoding="utf-8"?>
<s:Group
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:mx="library://ns.adobe.com/flex/mx">

	<fx:Script>
		<![CDATA[
			import anifire.creator.events.CcActionChosenEvent;
			import anifire.creator.events.CcCoreEvent;
			import anifire.creator.models.CcAction;
			import anifire.creator.models.CcCharacter;
			import anifire.creator.models.CcComponent;
			import anifire.creator.models.CcFacial;
			import anifire.creator.models.CcRequireComponent;
			import anifire.creator.models.CcTheme;
			import anifire.util.UtilDict;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.IViewCursor;
			import mx.collections.Sort;
			import mx.collections.SortField;

			private function creationcomplete(e:Event) : void
			{
			}
			
			public function init(param1:CcCharacter, param2:CcTheme) : void
			{
				var _loc11_:CcAction = null;
				var _loc12_:String = null;
				var _loc13_:CcFacial = null;
				var _loc3_:Number = param1.bodyShape.getActionNum();
				var _loc4_:ArrayCollection;
				(_loc4_ = new ArrayCollection()).disableAutoUpdate();
				var _loc5_:int = 0;
				while(_loc5_ < _loc3_)
				{
					if((_loc11_ = param1.bodyShape.getActionByIndex(_loc5_)).requireComponents.length <= 0 || this.checkIfRequiredComponentExist(param1,_loc11_.requireComponents))
					{
						if(_loc11_.enable)
						{
							_loc12_ = _loc11_.name;
							if(_loc11_.group)
							{
								_loc12_ = _loc11_.group;
							}
							else if(_loc11_.category)
							{
								_loc12_ = _loc11_.category + " - " + _loc12_;
							}
							_loc4_.addItem({
								"label":UtilDict.toDisplay("store",_loc12_),
								"data":_loc11_.id
							});
						}
					}
					_loc5_++;
				}
				var _loc6_:Number = param2.getFacialNum();
				var _loc7_:ArrayCollection;
				(_loc7_ = new ArrayCollection()).disableAutoUpdate();
				var _loc8_:int = 0;
				while(_loc8_ < _loc6_)
				{
					if((_loc13_ = param2.getFacialByIndex(_loc8_)).requireComponents.length <= 0 || this.checkIfRequiredComponentExist(param1,_loc13_.requireComponents))
					{
						_loc7_.addItem({
							"label":UtilDict.toDisplay("store",_loc13_.name),
							"data":_loc13_.facialId
						});
					}
					_loc8_++;
				}
				var _loc9_:SortField = new SortField();
				_loc9_.name = "label";
				//_loc9_.caseInsensitive = true;
				var _loc10_:Sort;
				(_loc10_ = new Sort()).fields = [_loc9_];
				_loc4_.sort = _loc10_;
				_loc4_.refresh();
				_loc7_.sort = _loc10_;
				_loc7_.refresh();
				_loc4_.enableAutoUpdate();
				_loc7_.enableAutoUpdate();
				this.acitonList.dataProvider = _loc4_;
				this.facialList.dataProvider = _loc7_;
				this.acitonList.validateNow();
				this.facialList.validateNow();
			}
			
			private function checkIfRequiredComponentExist(param1:CcCharacter, param2:Array) : Boolean
			{
				var _loc3_:int = 0;
				var _loc4_:int = 0;
				var _loc5_:Boolean = false;
				var _loc6_:CcRequireComponent = null;
				var _loc7_:Array = null;
				var _loc8_:CcComponent = null;
				var _loc9_:Boolean = false;
				_loc3_ = 0;
				while(true)
				{
					if(_loc3_ >= param2.length)
					{
						return true;
					}
					_loc6_ = param2[_loc3_] as CcRequireComponent;
					if((_loc7_ = param1.getUserChosenComponentByComponentType(_loc6_.componentType)) == null || _loc7_.length <= 0)
					{
						return false;
					}
					_loc9_ = false;
					_loc4_ = 0;
					while(_loc4_ < _loc7_.length)
					{
						_loc8_ = _loc7_[_loc4_] as CcComponent;
						if(_loc6_.componentIds.indexOf(_loc8_.componentThumb.componentId) >= 0)
						{
							_loc9_ = true;
							break;
						}
						_loc4_++;
					}
					if(!_loc9_)
					{
						break;
					}
					_loc3_++;
				}
				return false;
			}
			
			public function set action(param1:String) : void
			{
				var _loc2_:ICollectionView = this.acitonList.dataProvider as ICollectionView;
				var _loc3_:IViewCursor = _loc2_.createCursor();
				while(!_loc3_.afterLast)
				{
					if(_loc3_.current.data == param1)
					{
						this.acitonList.selectedItem = _loc3_.current;
						return;
					}
					_loc3_.moveNext();
				}
			}
			
			public function set facial(param1:String) : void
			{
				var _loc2_:ICollectionView = this.facialList.dataProvider as ICollectionView;
				var _loc3_:IViewCursor = _loc2_.createCursor();
				while(!_loc3_.afterLast)
				{
					if(_loc3_.current.data == param1)
					{
						this.facialList.selectedItem = _loc3_.current;
						return;
					}
					_loc3_.moveNext();
				}
			}
			
			public function set saveEnabled(param1:Boolean) : void
			{
			}
			
			private function actionSelected(param1:Event) : void
			{
				var _loc2_:CcActionChosenEvent = new CcActionChosenEvent(CcActionChosenEvent.ACTION_CHOSEN,this);
				if(Boolean(this.acitonList.selectedItem) && Boolean(this.facialList.selectedItem))
				{
					_loc2_.action_id = this.acitonList.selectedItem.data;
					_loc2_.facial_id = this.facialList.selectedItem.data;
					this.dispatchEvent(_loc2_);
				}
			}
			
			private function facialSelected(param1:Event) : void
			{
				var _loc2_:CcActionChosenEvent = new CcActionChosenEvent(CcActionChosenEvent.FACIAL_CHOSEN,this);
				if(Boolean(this.acitonList.selectedItem) && Boolean(this.facialList.selectedItem))
				{
					_loc2_.action_id = this.acitonList.selectedItem.data;
					_loc2_.facial_id = this.facialList.selectedItem.data;
					this.dispatchEvent(_loc2_);
				}
			}
			
			private function onSaveButtonClick() : void
			{
				var _loc1_:CcCoreEvent = new CcCoreEvent(CcCoreEvent.USER_WANT_TO_SAVE,this);
				this.dispatchEvent(_loc1_);
			}
			
			private function onModifyButtonClick(param1:Event = null) : void
			{
				var _loc2_:CcCoreEvent = new CcCoreEvent(CcCoreEvent.USER_WANT_TO_CANCEL,this);
				this.dispatchEvent(_loc2_);
			}
		]]>
	</fx:Script>

	<s:HGroup verticalAlign="middle">
		<s:Label
			maxDisplayedLines="1"
			right="0"
			top="2"
			bottom="4"
			width="130"
			verticalAlign="middle"
			paddingTop="6"
			color="0x515969"
			fontWeight="bold"
			fontSize="14"
			textAlign="right"
			text="{UtilDict.toDisplay('cc','Action:')}"/>
		<s:DropDownList
			id="acitonList"
			buttonMode="true"
			top="10"
			bottom="5"
			width="300"
			skinClass="anifire.creator.skins.ActionDropDownListSkin"
			change="actionSelected(event)">
			<s:layout>
				<s:VerticalLayout requestedMaxRowCount="-1" horizontalAlign="contentJustify" gap="0"/>
			</s:layout>
		</s:DropDownList>
		<s:Label
			maxDisplayedLines="1"
			right="0"
			top="2"
			bottom="4"
			width="130"
			verticalAlign="middle"
			paddingTop="6"
			color="0x515969"
			fontWeight="bold"
			fontSize="14"
			textAlign="right"
			text="{UtilDict.toDisplay('cc','Facial expression:')}"/>
		<s:DropDownList
			id="facialList"
			buttonMode="true"
			top="10"
			bottom="5"
			width="200"
			skinClass="anifire.creator.skins.ActionDropDownListSkin"
			change="facialSelected(event)">
			<s:layout>
				<s:VerticalLayout requestedMaxRowCount="-1" horizontalAlign="contentJustify" gap="0"/>
			</s:layout>
		</s:DropDownList>
	</s:HGroup>

</s:Group>
